server:
  port: 10086 # 端口
spring:
  application:
    name: leyou-registry # 应用名称，会在Eureka中显示
eureka:
  client:
    service-url:
      defaultZone: http://127.0.0.1:${server.port}/eureka # EurekaServer的地址，现在是自己的地址，如果是集群，需要加上其它Server的地址。

    register-with-eureka: false # 把自己注册到eureka服务列表 false就是不注册给自己
    # register-with-eureka其实是为服务提供者指定的
    # 服务提供者要向EurekaServer注册服务，并且完成服务续约等工作。
    # 当前项目就是EurekaServer，即eureka的服务server端（提供者和消费者都属于eureka的客户端，即client）,所以设置成false，不需要注册给自己
      #
      #    服务注册
      #
      #    服务提供者在启动时，会检测配置属性中的：eureka.client.register-with-eureka=true参数是否正确，事实上默认就是true。如果值确实为true，则会向EurekaServer发起一个Rest请求，并携带自己的元数据信息，Eureka Server会把这些信息保存到一个双层Map结构中。
      #
      #    - 第一层Map的Key就是服务id，一般是配置中的spring.application.name属性
      #    - 第二层Map的key是服务的实例id。一般host+ serviceId + port，例如：locahost:service-provider:8081
      #    - 值则是服务的实例对象，也就是说一个服务，可以同时启动多个不同实例，形成集群。
      #
      #    服务续约
      #
      #    在注册服务完成以后，服务提供者会维持一个心跳（定时向EurekaServer发起Rest请求），告诉EurekaServer：“我还活着”。这个我们称为服务的续约（renew）；
      #
      #    有两个重要参数可以修改服务续约的行为：
      #
      #    eureka:
      #      instance:
      #        lease-expiration-duration-in-seconds: 90
      #        lease-renewal-interval-in-seconds: 30
      #
      #      - lease-renewal-interval-in-seconds：服务续约(renew)的间隔，默认为30秒
      #      - lease-expiration-duration-in-seconds：服务失效时间，默认值90秒
      #
      #    也就是说，默认情况下每个30秒服务会向注册中心发送一次心跳，证明自己还活着。如果超过90秒没有发送心跳，EurekaServer就会认为该服务宕机，会从服务列表中移除，这两个值在生产环境不要修改，默认即可。
    #
    #    但是在开发时，这个值有点太长了，经常我们关掉一个服务，会发现Eureka依然认为服务在活着。所以我们在开发阶段可以适当调小。
    #     eureka:
    #        instance:
    #             lease-expiration-duration-in-seconds: 10 # 10秒即过期
    #             lease-renewal-interval-in-seconds: 5 # 5秒一次心跳


    fetch-registry: false # 拉取eureka服务信息，false就是不拉取 ,默认是true
    #是给eureka-client配置的，所以服务注册中心eureka-server要false
    # 获取服务列表
      #
      #当服务消费者启动时，会检测eureka.client.fetch-registry=true参数的值，如果为true，则会拉取Eureka Server服务的列表只读备份，然后缓存在本地。并且每隔30秒会重新获取并更新数据。我们可以通过下面的参数来修改：
      #
      #    eureka:
      #      client:
      #        registry-fetch-interval-seconds: 5
      #
      #生产环境中，我们不需要修改这个值。
    #
    #但是为了开发环境下，能够快速得到服务的最新状态，我们可以将其设置小一点。
  server:
    #自我保护
    #我们关停一个服务，就会在Eureka面板看到一条警告
    #这是触发了Eureka的自我保护机制。当一个服务未按时进行心跳续约时，Eureka会统计最近15分钟心跳失败的服务实例的比例是否超过了85%。
    #在生产环境下，因为网络延迟等原因，心跳失败实例的比例很有可能超标，但是此时就把服务剔除列表并不妥当，因为服务可能没有宕机。Eureka就会把当前实例的注册信息保护起来，不予剔除。生产环境下这很有效，保证了大多数服务依然可用。
    #
    #但是这给我们的开发带来了麻烦， 因此开发阶段我们都会关闭自我保护模式：（itcast-eureka）

    enable-self-preservation: false # 关闭自我保护模式（缺省为打开）

    #服务下线
      #
      #当服务进行正常关闭操作时，它会触发一个服务下线的REST请求给Eureka Server，告诉服务注册中心：“我要下线了”。服务中心接受到请求之后，将该服务置为下线状态。
      #
    #失效剔除
      #
      #有些时候，我们的服务提供方并不一定会正常下线，可能因为内存溢出、网络故障等原因导致服务无法正常工作。Eureka Server需要将这样的服务剔除出服务列表。
      #因此它会开启一个定时任务，每隔60秒对所有失效的服务（超过90秒未响应）进行剔除。
      #
      #可以通过eureka.server.eviction-interval-timer-in-ms参数对其进行修改，单位是毫秒，生产环境不要修改。
    #
    #这个会对我们开发带来极大的不变，你对服务重启，隔了60秒Eureka才反应过来。开发阶段可以适当调整，比如：10秒
    eviction-interval-timer-in-ms: 10000 #剔除无效连接的间隔时间 （缺省为60*1000ms）